{{>userheader}}


<!-- SweetAlert CSS -->

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
<style>
  body {
    color: #69707a;
  }

  .img-account-profile {
    height: 10rem;
  }

  .rounded-circle {
    border-radius: 50% !important;
  }

  .card {
    box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);
  }

  .card .card-header {
    font-weight: 500;
  }

  .card-header:first-child {
    border-radius: 0.35rem 0.35rem 0 0;
  }

  .card-header {
    padding: 1rem 1.35rem;
    margin-bottom: 0;
    background-color: rgba(33, 40, 50, 0.03);
    border-bottom: 1px solid rgba(33, 40, 50, 0.125);
  }

  .form-control,
  .dataTable-input {
    display: block;
    width: 100%;
    padding: 0.875rem 1.125rem;
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1;
    color: #69707a;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #c5ccd6;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border-radius: 0.35rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }

  .nav-borders .nav-link.active {
    color: #0061f2;
    border-bottom-color: #0061f2;
  }

  .nav-borders .nav-link {
    color: #69707a;
    border-bottom-width: 0.125rem;
    border-bottom-style: solid;
    border-bottom-color: transparent;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    padding-left: 0;
    padding-right: 0;
    margin-left: 1rem;
    margin-right: 1rem;
  }
</style>



<div class="container-xl px-4" style="margin-top: 100px; margin-bottom: 100px;">
  <!-- Account page navigation-->
  <nav class="nav nav-borders">
    <a class="nav-link " href="/profile">My Profile</a>
    <a class="nav-link" href="/adresses">Manage Address</a>
    <a class="nav-link" href="/wishlist">Wishlist</a>
    <a class="nav-link active ms-0" href="/my_orders">My Orders</a>
  </nav>
  <hr class="mt-0 mb-4">
  <div class="row">

    <div class="col-xl-8">
      <!-- Account details card-->
      <div class="card mb-4">
        <div class="card-header">Order details</div>
        <div class="card-body">
          {{!-- <div class=" mb-3 ml-auto" style="width: fit-content;">
            <button onclick="getInvoice('{{myOrderDetails._id}}')" class="btn btn-secondary ml-1">Invoice</button>
            <input type="hidden" name="order_id" value="{{myOrderDetails._id}}">
          </div> --}}
          <table class="table table-hover">
            <thead>
              <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Image</th>
                <th scope="col"></th>
              </tr>
            </thead>
            <tbody>


              {{#each orderedProDet}}

              <tr>
                <td scope="row">{{this.name}}</td>
                <td>₹ {{this.price}}</td>
                <td>{{this.quantity}}</td>
                <td><img style="width: 50px; height: auto;" src="/images/{{this.image}}" alt="product image"></td>
                <td>
                  {{!-- <a href="my_orders/details?id={{this._id}}" type="button" class="btn btn-warning">View
                    details</a> --}}
                </td>
              </tr>
              {{/each}}

            </tbody>
          </table>

          <div class="d-flex justify-content-between border mt-5 p-5" style="color: #000;">
            <div class="mt-3 ">
              <p class="mb-2">Total amount : ₹<strong>{{myOrderDetails.total}}</strong></p>

              <input type="hidden" name="total" value="{{myOrderDetails.total}}">
              <input type="hidden" name="pay-method" value="{{myOrderDetails.paymentMethod}}">
              <input type="hidden" name="user_wallet" value="{{walletValue}}">

              <p class="mb-2">Payment method: {{myOrderDetails.paymentMethod}}</p>
              <p class="mb-2">Order status : <span id="statuss">{{myOrderDetails.status}}</span></p>
              {{!-- {{#if myOrderDetails.coupon}}
              <p class="mb-2" style="color: green;">Coupon used: {{myOrderDetails.coupon}}</p>
              <p class="mb-2">Amount after discount :
                ₹<strong>{{myOrderDetails.amountAfterDscnt}}</strong></p>

              <input type="hidden" id="coupon" value="{{ myOrderDetails.coupon}}">
              <input type="hidden" name="amoutn_after_discount" value="{{myOrderDetails.amountAfterDscnt}}">


              <p class="mb-2">Discount amount : ₹<strong>{{myOrderDetails.discountAmt}}</strong></p>
              {{else}}
              <p class="mb-2" style="color: green;">No coupon applied</p>
              {{/if}} --}}

            </div>
            <div class="">
              <h5 class="border-bottom mb-3">Delivery address</h5>
              <p>{{address.name}}</p>
              <p>Mobile: {{address.mobile}}</p>
              <p>{{adress.adressLine1}}</p>
              <p>{{address.addressLine2}}</p>
              <p>{{address.city}}, {{address.state}},</p>
              <p>Pin: {{address.pin}}</p>

            </div>

          </div>
          {{!-- <p>Delivery address : {{myOrderDetails.address}}</p> --}}
          <div class="mt-3 mb-2">
            <a href="/my_orders" class="btn btn-primary">Back to my orders</a>



            {{!-- CANCEL ORDER --}}
            {{#if (or (eq myOrderDetails.status "pending") (eq myOrderDetails.status "Shipped"))}}
            <button id="myButton" class="btn btn-danger mx-2" onclick="cancelOrder('{{myOrderDetails._id}}')"
              type="submit">Cancel</button>
            {{/if}}




            {{!-- RETURN ORDER --}}
            {{#if (eq myOrderDetails.status "Delivered")}}
            <button id="myreturnButton" class="btn btn-danger mx-2"
              onclick="returnOrder('{{myOrderDetails._id}}')">Return</button>
            {{/if}}



            {{#if (noteq myOrderDetails.status "Cancelled")}}
            <div class=" mb-3 ml-auto" style="width: fit-content;">
              <button onclick="getInvoice('{{myOrderDetails._id}}')" class="btn btn-secondary ml-1">Invoice</button>
              <input type="hidden" name="order_id" value="{{myOrderDetails._id}}">
            </div>
            {{/if}}



          </div>
        </div>
      </div>
    </div>
  </div>
  {{!-- <p id="cancelMessage"></p> --}}
</div>

<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>


{{!-- CANCEL ORDER FETCH--}}
<script>
  const cancelOrder = async (id) => {

    //console.log('hi frm fetch')
    //console.log(id)
    const myButton = document.getElementById('myButton');

    fetch('/ordercancel', {
      method: 'POST',
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        id: id//to send 
      })
    })
      .then(response => {            //.then needed if not assigning fetch to a const variable 
        //returns a promise that resolves with the parsed JSON data, which is then passed as an argument to the second .then() method. 
        if (response.ok) {
          return response.json();
        }
        throw new Error('Network response was not ok.');
      })
      .then(jsonData => {
        //console.log(jsonData);
        document.getElementById('statuss').innerHTML = jsonData.status
        {
          {
            const hey = document.getElementById('statuss')
            hey.innerHTML = `${jsonData.status}`
          }
        }
        if (jsonData.status == 'Cancelled') {
          myButton.style.display = 'none';
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }
</script>


<script>


  const returnOrder = async (id) => {
    const myButton = document.getElementById('myreturnButton');

    try {
      const response = await fetch('/orderreturn', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: id,
        }),
      });

      if (response.ok) {
        const jsonData = await response.json();
        document.getElementById('statuss').innerHTML = jsonData.status;

        if (jsonData.status === 'returned') {
          myButton.style.display = 'none';
        }
      } else {
        throw new Error('Network response was not ok.');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };


</script>
<script>



  const getInvoice = async (id) => {
    await fetch(`/get_invoice?id=${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/pdf'
      }
    })
      .then(response => response.blob())
      .then(blob => {
        // Create a URL for the downloaded file
        const url = URL.createObjectURL(blob);

        // Create a link element to trigger the download
        const link = document.createElement('a');
        link.href = url;
        link.download = 'invoice.pdf';

        // Trigger the download
        link.click();

        // Clean up the URL object
        URL.revokeObjectURL(url);
      })
      .catch(error => {
        console.error(error);
      });
  }

</script>

{{>userfooter}}